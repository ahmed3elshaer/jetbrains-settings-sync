<application>
  <component name="ee.carlrobert.codegpt.state.conversations.ConversationsState">
    <option name="conversationsContainer" value="{&quot;conversationsMapping&quot;:{&quot;chat.completion&quot;:[{&quot;id&quot;:&quot;8bd216a6-b07b-459c-a9b0-f033084b957d&quot;,&quot;messages&quot;:[{&quot;prompt&quot;:&quot;convert this swiftui code to compose multiplatform\n```swift\n//\n//  RecipeDetail.swift\n//  iosApp\n//\n//  Created by Ahmed Elshaer on 3/14/23.\n//  Copyright Â© 2023 orgName. All rights reserved.\n//\n\nimport Shared\nimport SwiftUI\n\nstruct RecipeDetail: View {\n    let recipeId: String // A custom struct that holds the recipe data\n    @SwiftUI.State private var selection: String? = nil\n\n    @StateObject var store: RecipeDetailsStoreWrapper = .init()\n    var body: some View {\n        let recipe = store.state.recipe\n        ScrollView {\n            VStack {\n                // Show the photo of the recipe\n                AsyncImage(url: URL(string: recipe.image)) { imageView in\n                    imageView\n                        .resizable()\n                        .aspectRatio(contentMode: .fill)\n                } placeholder: {\n                    ProgressView()\n                        .foregroundColor(Color.surface)\n                }\n                .frame(maxWidth: .infinity, alignment: .center)\n                .clipShape(RoundedRectangle(cornerRadius: 25, style: .continuous))\n\n//                    // Show the title of the recipe\n//                    Text(recipe.title)\n//                        .typography(.h4)\n//                        .font(.largeTitle)\n//                        .foregroundStyle(\n//                            LinearGradient(colors: [Color(hex: \&quot;D3F36B\&quot;),Color(hex: \&quot;7BD880\&quot;), Color(hex: \&quot;28B691\&quot;),Color(hex: \&quot;009191\&quot;),Color(hex: \&quot;176C7D\&quot;),Color(hex: \&quot;2F4858\&quot;)],\n//                                           startPoint: .leading,\n//                                           endPoint: .trailing)\n//                        )\n//                        .fontWeight(.bold)\n//                        .padding()\n//                        .frame(maxWidth: .infinity, alignment: .leading)\n//\n                Spacer()\n\n                Text(recipe.summary)\n                    .lineLimit(4)\n                    .truncationMode(.tail)\n                    .typography(.p3)\n                    .padding()\n                    .frame(maxWidth: .infinity, alignment: .leading)\n\n                RecipeSummary(recipe: recipe)\n\n                Divider()\n\n                Ingredients(recipe: recipe)\n\n                Spacer()\n                if !recipe.analyzedInstructions.isEmpty {\n                    NavigationLink(destination: StepsView(recipe: recipe), tag: recipe.id.description, selection: $selection) {\n                        ThemeButton(text: \&quot;Start Cooking\&quot;) {\n                            selection = recipe.id.description\n                        }\n                        .padding()\n                    }\n                }\n            }\n            .onAppear {\n                store.dispatch(RecipeInfoAction.GetRecipeInfo(id: recipeId))\n            }\n        }\n    }\n}\n\nstruct Ingredients: View {\n    let recipe: Recipe\n    var body: some View {\n        Divider()\n        // Show a separate section for the ingredients\n        LazyVStack(alignment: .leading) {\n            Text(\&quot;Ingredients\&quot;)\n                .typography(.h4)\n                .padding([.top, .leading, .bottom])\n\n            ForEach(recipe.extendedIngredients, id: \\.self.hashValue) { ingredient in\n\n                VStack(alignment: .leading) {\n                    // Show the ingredient name and amount in a horizontal stack\n                    HStack {\n                        //\n                        AsyncImage(url: URL(string: \&quot;https://spoonacular.com/cdn/ingredients_100x100/\&quot; + ingredient.image)) { imageView in\n                            imageView\n                                .resizable()\n                                .aspectRatio(contentMode: .fit)\n                                .padding(4)\n\n                        } placeholder: {\n                            ProgressView()\n                                .foregroundColor(Color.surface)\n                        }\n                        .frame(width: 50, height: 50)\n                        .background(Color.white)\n                        .clipShape(RoundedRectangle(cornerRadius: 15, style: .continuous))\n                        .padding([.trailing])\n\n                        Text(ingredient.name.capitalized) // Ingredient name\n                            .typography(.p2)\n                            .font(.subheadline)\n\n                        Spacer()\n\n                        Text(\&quot;\\(ingredient.measures.metric.amount.description) \\(ingredient.measures.metric.unitShort)\&quot;) // Ingredient amount\n                            .typography(.p2)\n                            .font(.subheadline)\n                    }\n                    Divider()\n                        .padding([.leading, .trailing])\n                }\n                .padding([.leading, .trailing])\n            }\n        }\n    }\n}\n\nstruct RecipeSummary: View {\n    let recipe: Recipe\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading) {\n                Label(\&quot;\\(recipe.readyInMinutes) Minutes\&quot;, systemImage: \&quot;clock\&quot;)\n                    .typography(.p2)\n\n                Spacer()\n                // Show the ingredients count\n                Label(\&quot;\\(recipe.extendedIngredients.count) Ingredients\&quot;, systemImage: \&quot;list.bullet\&quot;)\n                    .typography(.p2)\n            }\n            Spacer()\n            VStack(alignment: .leading) {\n                // Show the number of steps\n                Label(\&quot;\\(recipe.analyzedInstructions.first?.steps.count ?? 0) Steps\&quot;, systemImage: \&quot;number\&quot;)\n                    .typography(.p2)\n\n                Spacer()\n\n                // Show the rating\n                Label(\&quot;\\(recipe.healthScore) Points\&quot;, systemImage: \&quot;arrow.up.heart\&quot;)\n                    .typography(.p2)\n            }\n        }\n        .padding([.top, .leading, .trailing])\n    }\n}\n\nstruct Steps: View {\n    let recipe: Recipe\n\n    var body: some View {\n        VStack(alignment: .leading) {\n            Text(\&quot;Steps\&quot;)\n                .typography(.h4)\n                .padding([.top, .leading, .bottom])\n\n            Spacer()\n\n            ForEach(recipe.analyzedInstructions.indices, id: \\.self.hashValue) { index in\n                let instruction = recipe.analyzedInstructions[index]\n                VStack(alignment: .leading) {\n                    Spacer()\n                    TabView {\n                        ForEach(instruction.steps, id: \\.self.hashValue) { step in\n                            ZStack {\n                                RoundedRectangle(cornerRadius: 25, style: .continuous)\n                                    .fill(Color.surface)\n\n                                VStack(alignment: .leading) {\n                                    Text(step.number.description)\n                                        .foregroundColor(Color.activePrimary)\n                                        .typography(.h1)\n                                        .padding([.bottom])\n\n                                    Text(step.step)\n                                        .typography(.p1)\n                                        .padding([.bottom])\n\n                                    HStack {\n                                        ForEach(step.ingredients, id: \\.self.hashValue) { ingredient in\n                                            AsyncImage(url: URL(string: \&quot;https://spoonacular.com/cdn/ingredients_100x100/\&quot; + ingredient.image)) { imageView in\n                                                imageView\n                                                    .resizable()\n                                                    .aspectRatio(contentMode: .fit)\n                                                    .padding(4)\n\n                                            } placeholder: {\n                                                ProgressView()\n                                                    .foregroundColor(Color.surface)\n                                            }\n                                            .frame(width: 50, height: 50)\n                                            .background(Color.white)\n                                            .clipShape(RoundedRectangle(cornerRadius: 15, style: .continuous))\n                                            .padding([.trailing])\n                                        }\n                                    }\n\n                                    HStack {\n                                        ForEach(step.equipment, id: \\.self.hashValue) { equipment in\n                                            AsyncImage(url: URL(string: \&quot;https://spoonacular.com/cdn/equipment_100x100/\&quot; + equipment.image)) { imageView in\n                                                imageView\n                                                    .resizable()\n                                                    .aspectRatio(contentMode: .fit)\n                                                    .padding(4)\n\n                                            } placeholder: {\n                                                ProgressView()\n                                                    .foregroundColor(Color.surface)\n                                            }\n                                            .frame(width: 50, height: 50)\n                                            .background(Color.white)\n                                            .clipShape(RoundedRectangle(cornerRadius: 15, style: .continuous))\n                                            .padding([.trailing])\n                                        }\n                                    }\n                                }\n                                .frame(maxHeight: .infinity, alignment: .topLeading)\n                                .padding()\n                            }\n                            .frame(maxHeight: .infinity, alignment: .topLeading)\n                            .padding()\n                        }\n                    }\n                    .tabViewStyle(.page)\n                    .frame(height: 350)\n                }\n            }\n        }\n    }\n}\n\n```&quot;,&quot;id&quot;:&quot;9bf3808c-b3eb-4a57-9a62-2267f4d73b3c&quot;,&quot;response&quot;:&quot;```kotlin\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.LazyRow\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.*\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowUpward\nimport androidx.compose.material.icons.filled.Clock\nimport androidx.compose.material.icons.filled.List\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.unit.dp\nimport coil.compose.rememberImagePainter\nimport org.jetbrains.compose.common.foundation.layout.Box\nimport org.jetbrains.compose.common.foundation.layout.Column\nimport org.jetbrains.compose.common.foundation.layout.Row\nimport org.jetbrains.compose.common.material.Text\nimport org.jetbrains.compose.common.ui.ExperimentalComposeWebWidgetsApi\nimport org.jetbrains.compose.common.ui.Modifier\nimport org.jetbrains.compose.web.ui.ExperimentalComposeWebWidgetsApi\nimport org.jetbrains.compose.web.ui.layout\n\n@Composable\nfun RecipeDetail(recipeId: String, store: RecipeDetailsStoreWrapper) {\n    val recipe by remember { store.state }.collectAsState(initial = Recipe())\n\n    LaunchedEffect(Unit) {\n        store.dispatch(RecipeInfoAction.GetRecipeInfo(id = recipeId))\n    }\n\n    LazyColumn {\n        item {\n            Image(\n                painter = rememberImagePainter(recipe.image),\n                contentDescription = null,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .clip(RoundedCornerShape(25.dp)),\n                contentScale = ContentScale.FillWidth\n            )\n\n            Spacer(modifier = Modifier.height(16.dp))\n\n            Text(\n                text = recipe.summary,\n                maxLines = 4,\n                overflow = TextOverflow.Ellipsis,\n                modifier = Modifier.padding(16.dp)\n            )\n\n            RecipeSummary(recipe = recipe)\n\n            Divider()\n\n            Ingredients(recipe = recipe)\n\n            if (recipe.analyzedInstructions.isNotEmpty()) {\n                Button(onClick = { /* TODO: Navigate to StepsView */ }) {\n                    Text(\&quot;Start Cooking\&quot;)\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun Ingredients(recipe: Recipe) {\n    Column {\n        Text(\&quot;Ingredients\&quot;, style = MaterialTheme.typography.h6, modifier = Modifier.padding(8.dp))\n        recipe.extendedIngredients.forEach { ingredient -&gt;\n            Row(verticalAlignment = Alignment.CenterVertically) {\n                Image(\n                    painter = rememberImagePainter(\&quot;https://spoonacular.com/cdn/ingredients_100x100/${ingredient.image}\&quot;),\n                    contentDescription = null,\n                    modifier = Modifier\n                        .size(50.dp)\n                        .clip(RoundedCornerShape(15.dp)),\n                    contentScale = ContentScale.Fit\n                )\n                Text(ingredient.name.capitalize(), modifier = Modifier.padding(8.dp))\n                Spacer(Modifier.weight(1f))\n                Text(\&quot;${ingredient.measures.metric.amount} ${ingredient.measures.metric.unitShort}\&quot;)\n            }\n            Divider()\n        }\n    }\n}\n\n@Composable\nfun RecipeSummary(recipe: Recipe) {\n    Row(modifier = Modifier.fillMaxWidth().padding(8.dp)) {\n        Column(modifier = Modifier.weight(1f)) {\n            Icon(Icons.Default.Clock, contentDescription = null)\n            Text(\&quot;${recipe.readyInMinutes} Minutes\&quot;)\n            Spacer(Modifier.height(4.dp))\n            Icon(Icons.Default.List, contentDescription = null)\n            Text(\&quot;${recipe.extendedIngredients.size} Ingredients\&quot;)\n        }\n        Column(modifier = Modifier.weight(1f)) {\n            Icon(Icons.Default.ArrowUpward, contentDescription = null)\n            Text(\&quot;${recipe.analyzedInstructions.firstOrNull()?.steps?.size ?: 0} Steps\&quot;)\n            Spacer(Modifier.height(4.dp))\n            // Assuming there's a health score icon\n            Icon(Icons.Default.ArrowUpward, contentDescription = null)\n            Text(\&quot;${recipe.healthScore} Points\&quot;)\n        }\n    }\n&quot;,&quot;userMessage&quot;:&quot;convert this swiftui code to compose multiplatform&quot;,&quot;serpResults&quot;:null,&quot;referencedFilePaths&quot;:null},{&quot;prompt&quot;:&quot;can you use KamelImage instead of Coil for image loading ?\n```swift\n//\n//  RecipeDetail.swift\n//  iosApp\n//\n//  Created by Ahmed Elshaer on 3/14/23.\n//  Copyright Â© 2023 orgName. All rights reserved.\n//\n\nimport Shared\nimport SwiftUI\n\nstruct RecipeDetail: View {\n    let recipeId: String // A custom struct that holds the recipe data\n    @SwiftUI.State private var selection: String? = nil\n\n    @StateObject var store: RecipeDetailsStoreWrapper = .init()\n    var body: some View {\n        let recipe = store.state.recipe\n        ScrollView {\n            VStack {\n                // Show the photo of the recipe\n                AsyncImage(url: URL(string: recipe.image)) { imageView in\n                    imageView\n                        .resizable()\n                        .aspectRatio(contentMode: .fill)\n                } placeholder: {\n                    ProgressView()\n                        .foregroundColor(Color.surface)\n                }\n                .frame(maxWidth: .infinity, alignment: .center)\n                .clipShape(RoundedRectangle(cornerRadius: 25, style: .continuous))\n\n//                    // Show the title of the recipe\n//                    Text(recipe.title)\n//                        .typography(.h4)\n//                        .font(.largeTitle)\n//                        .foregroundStyle(\n//                            LinearGradient(colors: [Color(hex: \&quot;D3F36B\&quot;),Color(hex: \&quot;7BD880\&quot;), Color(hex: \&quot;28B691\&quot;),Color(hex: \&quot;009191\&quot;),Color(hex: \&quot;176C7D\&quot;),Color(hex: \&quot;2F4858\&quot;)],\n//                                           startPoint: .leading,\n//                                           endPoint: .trailing)\n//                        )\n//                        .fontWeight(.bold)\n//                        .padding()\n//                        .frame(maxWidth: .infinity, alignment: .leading)\n//\n                Spacer()\n\n                Text(recipe.summary)\n                    .lineLimit(4)\n                    .truncationMode(.tail)\n                    .typography(.p3)\n                    .padding()\n                    .frame(maxWidth: .infinity, alignment: .leading)\n\n                RecipeSummary(recipe: recipe)\n\n                Divider()\n\n                Ingredients(recipe: recipe)\n\n                Spacer()\n                if !recipe.analyzedInstructions.isEmpty {\n                    NavigationLink(destination: StepsView(recipe: recipe), tag: recipe.id.description, selection: $selection) {\n                        ThemeButton(text: \&quot;Start Cooking\&quot;) {\n                            selection = recipe.id.description\n                        }\n                        .padding()\n                    }\n                }\n            }\n            .onAppear {\n                store.dispatch(RecipeInfoAction.GetRecipeInfo(id: recipeId))\n            }\n        }\n    }\n}\n\nstruct Ingredients: View {\n    let recipe: Recipe\n    var body: some View {\n        Divider()\n        // Show a separate section for the ingredients\n        LazyVStack(alignment: .leading) {\n            Text(\&quot;Ingredients\&quot;)\n                .typography(.h4)\n                .padding([.top, .leading, .bottom])\n\n            ForEach(recipe.extendedIngredients, id: \\.self.hashValue) { ingredient in\n\n                VStack(alignment: .leading) {\n                    // Show the ingredient name and amount in a horizontal stack\n                    HStack {\n                        //\n                        AsyncImage(url: URL(string: \&quot;https://spoonacular.com/cdn/ingredients_100x100/\&quot; + ingredient.image)) { imageView in\n                            imageView\n                                .resizable()\n                                .aspectRatio(contentMode: .fit)\n                                .padding(4)\n\n                        } placeholder: {\n                            ProgressView()\n                                .foregroundColor(Color.surface)\n                        }\n                        .frame(width: 50, height: 50)\n                        .background(Color.white)\n                        .clipShape(RoundedRectangle(cornerRadius: 15, style: .continuous))\n                        .padding([.trailing])\n\n                        Text(ingredient.name.capitalized) // Ingredient name\n                            .typography(.p2)\n                            .font(.subheadline)\n\n                        Spacer()\n\n                        Text(\&quot;\\(ingredient.measures.metric.amount.description) \\(ingredient.measures.metric.unitShort)\&quot;) // Ingredient amount\n                            .typography(.p2)\n                            .font(.subheadline)\n                    }\n                    Divider()\n                        .padding([.leading, .trailing])\n                }\n                .padding([.leading, .trailing])\n            }\n        }\n    }\n}\n\nstruct RecipeSummary: View {\n    let recipe: Recipe\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading) {\n                Label(\&quot;\\(recipe.readyInMinutes) Minutes\&quot;, systemImage: \&quot;clock\&quot;)\n                    .typography(.p2)\n\n                Spacer()\n                // Show the ingredients count\n                Label(\&quot;\\(recipe.extendedIngredients.count) Ingredients\&quot;, systemImage: \&quot;list.bullet\&quot;)\n                    .typography(.p2)\n            }\n            Spacer()\n            VStack(alignment: .leading) {\n                // Show the number of steps\n                Label(\&quot;\\(recipe.analyzedInstructions.first?.steps.count ?? 0) Steps\&quot;, systemImage: \&quot;number\&quot;)\n                    .typography(.p2)\n\n                Spacer()\n\n                // Show the rating\n                Label(\&quot;\\(recipe.healthScore) Points\&quot;, systemImage: \&quot;arrow.up.heart\&quot;)\n                    .typography(.p2)\n            }\n        }\n        .padding([.top, .leading, .trailing])\n    }\n}\n\nstruct Steps: View {\n    let recipe: Recipe\n\n    var body: some View {\n        VStack(alignment: .leading) {\n            Text(\&quot;Steps\&quot;)\n                .typography(.h4)\n                .padding([.top, .leading, .bottom])\n\n            Spacer()\n\n            ForEach(recipe.analyzedInstructions.indices, id: \\.self.hashValue) { index in\n                let instruction = recipe.analyzedInstructions[index]\n                VStack(alignment: .leading) {\n                    Spacer()\n                    TabView {\n                        ForEach(instruction.steps, id: \\.self.hashValue) { step in\n                            ZStack {\n                                RoundedRectangle(cornerRadius: 25, style: .continuous)\n                                    .fill(Color.surface)\n\n                                VStack(alignment: .leading) {\n                                    Text(step.number.description)\n                                        .foregroundColor(Color.activePrimary)\n                                        .typography(.h1)\n                                        .padding([.bottom])\n\n                                    Text(step.step)\n                                        .typography(.p1)\n                                        .padding([.bottom])\n\n                                    HStack {\n                                        ForEach(step.ingredients, id: \\.self.hashValue) { ingredient in\n                                            AsyncImage(url: URL(string: \&quot;https://spoonacular.com/cdn/ingredients_100x100/\&quot; + ingredient.image)) { imageView in\n                                                imageView\n                                                    .resizable()\n                                                    .aspectRatio(contentMode: .fit)\n                                                    .padding(4)\n\n                                            } placeholder: {\n                                                ProgressView()\n                                                    .foregroundColor(Color.surface)\n                                            }\n                                            .frame(width: 50, height: 50)\n                                            .background(Color.white)\n                                            .clipShape(RoundedRectangle(cornerRadius: 15, style: .continuous))\n                                            .padding([.trailing])\n                                        }\n                                    }\n\n                                    HStack {\n                                        ForEach(step.equipment, id: \\.self.hashValue) { equipment in\n                                            AsyncImage(url: URL(string: \&quot;https://spoonacular.com/cdn/equipment_100x100/\&quot; + equipment.image)) { imageView in\n                                                imageView\n                                                    .resizable()\n                                                    .aspectRatio(contentMode: .fit)\n                                                    .padding(4)\n\n                                            } placeholder: {\n                                                ProgressView()\n                                                    .foregroundColor(Color.surface)\n                                            }\n                                            .frame(width: 50, height: 50)\n                                            .background(Color.white)\n                                            .clipShape(RoundedRectangle(cornerRadius: 15, style: .continuous))\n                                            .padding([.trailing])\n                                        }\n                                    }\n                                }\n                                .frame(maxHeight: .infinity, alignment: .topLeading)\n                                .padding()\n                            }\n                            .frame(maxHeight: .infinity, alignment: .topLeading)\n                            .padding()\n                        }\n                    }\n                    .tabViewStyle(.page)\n                    .frame(height: 350)\n                }\n            }\n        }\n    }\n}\n\n```&quot;,&quot;id&quot;:&quot;4bb635c1-3206-4a5a-b34c-8cfd0fd6fd43&quot;,&quot;response&quot;:&quot;```kotlin\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport io.kamel.image.KamelImage\nimport io.kamel.image.lazyPainterResource\nimport org.jetbrains.compose.common.foundation.layout.Column\nimport org.jetbrains.compose.common.foundation.layout.Row\n\n@Composable\nfun RecipeDetail(recipeId: String, store: RecipeDetailsStoreWrapper) {\n    val recipe by remember { store.state }.collectAsState(initial = Recipe())\n\n    LaunchedEffect(Unit) {\n        store.dispatch(RecipeInfoAction.GetRecipeInfo(id = recipeId))\n    }\n\n    LazyColumn {\n        item {\n            KamelImage(\n                resource = lazyPainterResource(recipe.image),\n                contentDescription = null,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .clip(RoundedCornerShape(25.dp)),\n                contentScale = ContentScale.FillWidth\n            )\n\n            Spacer(modifier = Modifier.height(16.dp))\n\n            Text(\n                text = recipe.summary,\n                maxLines = 4,\n                overflow = TextOverflow.Ellipsis,\n                modifier = Modifier.padding(16.dp)\n            )\n\n            RecipeSummary(recipe = recipe)\n\n            Divider()\n\n            Ingredients(recipe = recipe)\n\n            if (recipe.analyzedInstructions.isNotEmpty()) {\n                Button(onClick = { /* TODO: Navigate to StepsView */ }) {\n                    Text(\&quot;Start Cooking\&quot;)\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun Ingredients(recipe: Recipe) {\n    Column {\n        Text(\&quot;Ingredients\&quot;, style = MaterialTheme.typography.h6, modifier = Modifier.padding(8.dp))\n        recipe.extendedIngredients.forEach { ingredient -&gt;\n            Row(verticalAlignment = Alignment.CenterVertically) {\n                KamelImage(\n                    resource = lazyPainterResource(\&quot;https://spoonacular.com/cdn/ingredients_100x100/${ingredient.image}\&quot;),\n                    contentDescription = null,\n                    modifier = Modifier\n                        .size(50.dp)\n                        .clip(RoundedCornerShape(15.dp)),\n                    contentScale = ContentScale.Fit\n                )\n                Text(ingredient.name.capitalize(), modifier = Modifier.padding(8.dp))\n                Spacer(Modifier.weight(1f))\n                Text(\&quot;${ingredient.measures.metric.amount} ${ingredient.measures.metric.unitShort}\&quot;)\n            }\n            Divider()\n        }\n    }\n}\n\n@Composable\nfun RecipeSummary(recipe: Recipe) {\n    Row(modifier = Modifier.fillMaxWidth().padding(8.dp)) {\n        Column(modifier = Modifier.weight(1f)) {\n            Icon(Icons.Default.Clock, contentDescription = null)\n            Text(\&quot;${recipe.readyInMinutes} Minutes\&quot;)\n            Spacer(Modifier.height(4.dp))\n            Icon(Icons.Default.List, contentDescription = null)\n            Text(\&quot;${recipe.extendedIngredients.size} Ingredients\&quot;)\n        }\n        Column(modifier = Modifier.weight(1f)) {\n            Icon(Icons.Default.ArrowUpward, contentDescription = null)\n            Text(\&quot;${recipe.analyzedInstructions.firstOrNull()?.steps?.size ?: 0} Steps\&quot;)\n            Spacer(Modifier.height(4.dp))\n            // Assuming there's a health score icon\n            Icon(Icons.Default.ArrowUpward, contentDescription = null)\n            Text(\&quot;${recipe.healthScore} Points\&quot;)\n        }\n&quot;,&quot;userMessage&quot;:&quot;can you use KamelImage instead of Coil for image loading ?&quot;,&quot;serpResults&quot;:null,&quot;referencedFilePaths&quot;:null},{&quot;prompt&quot;:&quot;create a another dependecy for material icons and material icons extended\n```toml\ncompose-material = { module = \&quot;androidx.compose.material:material\&quot;, version.ref = \&quot;androidx-compose-ui\&quot; }\n\n```&quot;,&quot;id&quot;:&quot;687e682a-fd89-4e0a-a9b8-e5dd2412cf18&quot;,&quot;response&quot;:&quot;```toml\ncompose-material-icons-core = { module = \&quot;androidx.compose.material:material-icons-core\&quot;, version.ref = \&quot;androidx-compose-ui\&quot; }\ncompose-material-icons-extended = { module = \&quot;androidx.compose.material:material-icons-extended\&quot;, version.ref = \&quot;androidx-compose-ui&quot;,&quot;userMessage&quot;:&quot;create a another dependecy for material icons and material icons extended&quot;,&quot;serpResults&quot;:null,&quot;referencedFilePaths&quot;:null}],&quot;clientCode&quot;:&quot;chat.completion&quot;,&quot;model&quot;:&quot;gpt-4-0125-preview&quot;,&quot;createdOn&quot;:[2024,4,9,21,0,6,676058000],&quot;updatedOn&quot;:[2024,4,9,21,9,34,231400000],&quot;discardTokenLimit&quot;:false}]}}" />
    <option name="currentConversation" value="{&quot;id&quot;:&quot;8bd216a6-b07b-459c-a9b0-f033084b957d&quot;,&quot;messages&quot;:[{&quot;prompt&quot;:&quot;convert this swiftui code to compose multiplatform\n```swift\n//\n//  RecipeDetail.swift\n//  iosApp\n//\n//  Created by Ahmed Elshaer on 3/14/23.\n//  Copyright Â© 2023 orgName. All rights reserved.\n//\n\nimport Shared\nimport SwiftUI\n\nstruct RecipeDetail: View {\n    let recipeId: String // A custom struct that holds the recipe data\n    @SwiftUI.State private var selection: String? = nil\n\n    @StateObject var store: RecipeDetailsStoreWrapper = .init()\n    var body: some View {\n        let recipe = store.state.recipe\n        ScrollView {\n            VStack {\n                // Show the photo of the recipe\n                AsyncImage(url: URL(string: recipe.image)) { imageView in\n                    imageView\n                        .resizable()\n                        .aspectRatio(contentMode: .fill)\n                } placeholder: {\n                    ProgressView()\n                        .foregroundColor(Color.surface)\n                }\n                .frame(maxWidth: .infinity, alignment: .center)\n                .clipShape(RoundedRectangle(cornerRadius: 25, style: .continuous))\n\n//                    // Show the title of the recipe\n//                    Text(recipe.title)\n//                        .typography(.h4)\n//                        .font(.largeTitle)\n//                        .foregroundStyle(\n//                            LinearGradient(colors: [Color(hex: \&quot;D3F36B\&quot;),Color(hex: \&quot;7BD880\&quot;), Color(hex: \&quot;28B691\&quot;),Color(hex: \&quot;009191\&quot;),Color(hex: \&quot;176C7D\&quot;),Color(hex: \&quot;2F4858\&quot;)],\n//                                           startPoint: .leading,\n//                                           endPoint: .trailing)\n//                        )\n//                        .fontWeight(.bold)\n//                        .padding()\n//                        .frame(maxWidth: .infinity, alignment: .leading)\n//\n                Spacer()\n\n                Text(recipe.summary)\n                    .lineLimit(4)\n                    .truncationMode(.tail)\n                    .typography(.p3)\n                    .padding()\n                    .frame(maxWidth: .infinity, alignment: .leading)\n\n                RecipeSummary(recipe: recipe)\n\n                Divider()\n\n                Ingredients(recipe: recipe)\n\n                Spacer()\n                if !recipe.analyzedInstructions.isEmpty {\n                    NavigationLink(destination: StepsView(recipe: recipe), tag: recipe.id.description, selection: $selection) {\n                        ThemeButton(text: \&quot;Start Cooking\&quot;) {\n                            selection = recipe.id.description\n                        }\n                        .padding()\n                    }\n                }\n            }\n            .onAppear {\n                store.dispatch(RecipeInfoAction.GetRecipeInfo(id: recipeId))\n            }\n        }\n    }\n}\n\nstruct Ingredients: View {\n    let recipe: Recipe\n    var body: some View {\n        Divider()\n        // Show a separate section for the ingredients\n        LazyVStack(alignment: .leading) {\n            Text(\&quot;Ingredients\&quot;)\n                .typography(.h4)\n                .padding([.top, .leading, .bottom])\n\n            ForEach(recipe.extendedIngredients, id: \\.self.hashValue) { ingredient in\n\n                VStack(alignment: .leading) {\n                    // Show the ingredient name and amount in a horizontal stack\n                    HStack {\n                        //\n                        AsyncImage(url: URL(string: \&quot;https://spoonacular.com/cdn/ingredients_100x100/\&quot; + ingredient.image)) { imageView in\n                            imageView\n                                .resizable()\n                                .aspectRatio(contentMode: .fit)\n                                .padding(4)\n\n                        } placeholder: {\n                            ProgressView()\n                                .foregroundColor(Color.surface)\n                        }\n                        .frame(width: 50, height: 50)\n                        .background(Color.white)\n                        .clipShape(RoundedRectangle(cornerRadius: 15, style: .continuous))\n                        .padding([.trailing])\n\n                        Text(ingredient.name.capitalized) // Ingredient name\n                            .typography(.p2)\n                            .font(.subheadline)\n\n                        Spacer()\n\n                        Text(\&quot;\\(ingredient.measures.metric.amount.description) \\(ingredient.measures.metric.unitShort)\&quot;) // Ingredient amount\n                            .typography(.p2)\n                            .font(.subheadline)\n                    }\n                    Divider()\n                        .padding([.leading, .trailing])\n                }\n                .padding([.leading, .trailing])\n            }\n        }\n    }\n}\n\nstruct RecipeSummary: View {\n    let recipe: Recipe\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading) {\n                Label(\&quot;\\(recipe.readyInMinutes) Minutes\&quot;, systemImage: \&quot;clock\&quot;)\n                    .typography(.p2)\n\n                Spacer()\n                // Show the ingredients count\n                Label(\&quot;\\(recipe.extendedIngredients.count) Ingredients\&quot;, systemImage: \&quot;list.bullet\&quot;)\n                    .typography(.p2)\n            }\n            Spacer()\n            VStack(alignment: .leading) {\n                // Show the number of steps\n                Label(\&quot;\\(recipe.analyzedInstructions.first?.steps.count ?? 0) Steps\&quot;, systemImage: \&quot;number\&quot;)\n                    .typography(.p2)\n\n                Spacer()\n\n                // Show the rating\n                Label(\&quot;\\(recipe.healthScore) Points\&quot;, systemImage: \&quot;arrow.up.heart\&quot;)\n                    .typography(.p2)\n            }\n        }\n        .padding([.top, .leading, .trailing])\n    }\n}\n\nstruct Steps: View {\n    let recipe: Recipe\n\n    var body: some View {\n        VStack(alignment: .leading) {\n            Text(\&quot;Steps\&quot;)\n                .typography(.h4)\n                .padding([.top, .leading, .bottom])\n\n            Spacer()\n\n            ForEach(recipe.analyzedInstructions.indices, id: \\.self.hashValue) { index in\n                let instruction = recipe.analyzedInstructions[index]\n                VStack(alignment: .leading) {\n                    Spacer()\n                    TabView {\n                        ForEach(instruction.steps, id: \\.self.hashValue) { step in\n                            ZStack {\n                                RoundedRectangle(cornerRadius: 25, style: .continuous)\n                                    .fill(Color.surface)\n\n                                VStack(alignment: .leading) {\n                                    Text(step.number.description)\n                                        .foregroundColor(Color.activePrimary)\n                                        .typography(.h1)\n                                        .padding([.bottom])\n\n                                    Text(step.step)\n                                        .typography(.p1)\n                                        .padding([.bottom])\n\n                                    HStack {\n                                        ForEach(step.ingredients, id: \\.self.hashValue) { ingredient in\n                                            AsyncImage(url: URL(string: \&quot;https://spoonacular.com/cdn/ingredients_100x100/\&quot; + ingredient.image)) { imageView in\n                                                imageView\n                                                    .resizable()\n                                                    .aspectRatio(contentMode: .fit)\n                                                    .padding(4)\n\n                                            } placeholder: {\n                                                ProgressView()\n                                                    .foregroundColor(Color.surface)\n                                            }\n                                            .frame(width: 50, height: 50)\n                                            .background(Color.white)\n                                            .clipShape(RoundedRectangle(cornerRadius: 15, style: .continuous))\n                                            .padding([.trailing])\n                                        }\n                                    }\n\n                                    HStack {\n                                        ForEach(step.equipment, id: \\.self.hashValue) { equipment in\n                                            AsyncImage(url: URL(string: \&quot;https://spoonacular.com/cdn/equipment_100x100/\&quot; + equipment.image)) { imageView in\n                                                imageView\n                                                    .resizable()\n                                                    .aspectRatio(contentMode: .fit)\n                                                    .padding(4)\n\n                                            } placeholder: {\n                                                ProgressView()\n                                                    .foregroundColor(Color.surface)\n                                            }\n                                            .frame(width: 50, height: 50)\n                                            .background(Color.white)\n                                            .clipShape(RoundedRectangle(cornerRadius: 15, style: .continuous))\n                                            .padding([.trailing])\n                                        }\n                                    }\n                                }\n                                .frame(maxHeight: .infinity, alignment: .topLeading)\n                                .padding()\n                            }\n                            .frame(maxHeight: .infinity, alignment: .topLeading)\n                            .padding()\n                        }\n                    }\n                    .tabViewStyle(.page)\n                    .frame(height: 350)\n                }\n            }\n        }\n    }\n}\n\n```&quot;,&quot;id&quot;:&quot;9bf3808c-b3eb-4a57-9a62-2267f4d73b3c&quot;,&quot;response&quot;:&quot;```kotlin\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.LazyRow\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.*\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowUpward\nimport androidx.compose.material.icons.filled.Clock\nimport androidx.compose.material.icons.filled.List\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.unit.dp\nimport coil.compose.rememberImagePainter\nimport org.jetbrains.compose.common.foundation.layout.Box\nimport org.jetbrains.compose.common.foundation.layout.Column\nimport org.jetbrains.compose.common.foundation.layout.Row\nimport org.jetbrains.compose.common.material.Text\nimport org.jetbrains.compose.common.ui.ExperimentalComposeWebWidgetsApi\nimport org.jetbrains.compose.common.ui.Modifier\nimport org.jetbrains.compose.web.ui.ExperimentalComposeWebWidgetsApi\nimport org.jetbrains.compose.web.ui.layout\n\n@Composable\nfun RecipeDetail(recipeId: String, store: RecipeDetailsStoreWrapper) {\n    val recipe by remember { store.state }.collectAsState(initial = Recipe())\n\n    LaunchedEffect(Unit) {\n        store.dispatch(RecipeInfoAction.GetRecipeInfo(id = recipeId))\n    }\n\n    LazyColumn {\n        item {\n            Image(\n                painter = rememberImagePainter(recipe.image),\n                contentDescription = null,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .clip(RoundedCornerShape(25.dp)),\n                contentScale = ContentScale.FillWidth\n            )\n\n            Spacer(modifier = Modifier.height(16.dp))\n\n            Text(\n                text = recipe.summary,\n                maxLines = 4,\n                overflow = TextOverflow.Ellipsis,\n                modifier = Modifier.padding(16.dp)\n            )\n\n            RecipeSummary(recipe = recipe)\n\n            Divider()\n\n            Ingredients(recipe = recipe)\n\n            if (recipe.analyzedInstructions.isNotEmpty()) {\n                Button(onClick = { /* TODO: Navigate to StepsView */ }) {\n                    Text(\&quot;Start Cooking\&quot;)\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun Ingredients(recipe: Recipe) {\n    Column {\n        Text(\&quot;Ingredients\&quot;, style = MaterialTheme.typography.h6, modifier = Modifier.padding(8.dp))\n        recipe.extendedIngredients.forEach { ingredient -&gt;\n            Row(verticalAlignment = Alignment.CenterVertically) {\n                Image(\n                    painter = rememberImagePainter(\&quot;https://spoonacular.com/cdn/ingredients_100x100/${ingredient.image}\&quot;),\n                    contentDescription = null,\n                    modifier = Modifier\n                        .size(50.dp)\n                        .clip(RoundedCornerShape(15.dp)),\n                    contentScale = ContentScale.Fit\n                )\n                Text(ingredient.name.capitalize(), modifier = Modifier.padding(8.dp))\n                Spacer(Modifier.weight(1f))\n                Text(\&quot;${ingredient.measures.metric.amount} ${ingredient.measures.metric.unitShort}\&quot;)\n            }\n            Divider()\n        }\n    }\n}\n\n@Composable\nfun RecipeSummary(recipe: Recipe) {\n    Row(modifier = Modifier.fillMaxWidth().padding(8.dp)) {\n        Column(modifier = Modifier.weight(1f)) {\n            Icon(Icons.Default.Clock, contentDescription = null)\n            Text(\&quot;${recipe.readyInMinutes} Minutes\&quot;)\n            Spacer(Modifier.height(4.dp))\n            Icon(Icons.Default.List, contentDescription = null)\n            Text(\&quot;${recipe.extendedIngredients.size} Ingredients\&quot;)\n        }\n        Column(modifier = Modifier.weight(1f)) {\n            Icon(Icons.Default.ArrowUpward, contentDescription = null)\n            Text(\&quot;${recipe.analyzedInstructions.firstOrNull()?.steps?.size ?: 0} Steps\&quot;)\n            Spacer(Modifier.height(4.dp))\n            // Assuming there's a health score icon\n            Icon(Icons.Default.ArrowUpward, contentDescription = null)\n            Text(\&quot;${recipe.healthScore} Points\&quot;)\n        }\n    }\n&quot;,&quot;userMessage&quot;:&quot;convert this swiftui code to compose multiplatform&quot;,&quot;serpResults&quot;:null,&quot;referencedFilePaths&quot;:null},{&quot;prompt&quot;:&quot;can you use KamelImage instead of Coil for image loading ?\n```swift\n//\n//  RecipeDetail.swift\n//  iosApp\n//\n//  Created by Ahmed Elshaer on 3/14/23.\n//  Copyright Â© 2023 orgName. All rights reserved.\n//\n\nimport Shared\nimport SwiftUI\n\nstruct RecipeDetail: View {\n    let recipeId: String // A custom struct that holds the recipe data\n    @SwiftUI.State private var selection: String? = nil\n\n    @StateObject var store: RecipeDetailsStoreWrapper = .init()\n    var body: some View {\n        let recipe = store.state.recipe\n        ScrollView {\n            VStack {\n                // Show the photo of the recipe\n                AsyncImage(url: URL(string: recipe.image)) { imageView in\n                    imageView\n                        .resizable()\n                        .aspectRatio(contentMode: .fill)\n                } placeholder: {\n                    ProgressView()\n                        .foregroundColor(Color.surface)\n                }\n                .frame(maxWidth: .infinity, alignment: .center)\n                .clipShape(RoundedRectangle(cornerRadius: 25, style: .continuous))\n\n//                    // Show the title of the recipe\n//                    Text(recipe.title)\n//                        .typography(.h4)\n//                        .font(.largeTitle)\n//                        .foregroundStyle(\n//                            LinearGradient(colors: [Color(hex: \&quot;D3F36B\&quot;),Color(hex: \&quot;7BD880\&quot;), Color(hex: \&quot;28B691\&quot;),Color(hex: \&quot;009191\&quot;),Color(hex: \&quot;176C7D\&quot;),Color(hex: \&quot;2F4858\&quot;)],\n//                                           startPoint: .leading,\n//                                           endPoint: .trailing)\n//                        )\n//                        .fontWeight(.bold)\n//                        .padding()\n//                        .frame(maxWidth: .infinity, alignment: .leading)\n//\n                Spacer()\n\n                Text(recipe.summary)\n                    .lineLimit(4)\n                    .truncationMode(.tail)\n                    .typography(.p3)\n                    .padding()\n                    .frame(maxWidth: .infinity, alignment: .leading)\n\n                RecipeSummary(recipe: recipe)\n\n                Divider()\n\n                Ingredients(recipe: recipe)\n\n                Spacer()\n                if !recipe.analyzedInstructions.isEmpty {\n                    NavigationLink(destination: StepsView(recipe: recipe), tag: recipe.id.description, selection: $selection) {\n                        ThemeButton(text: \&quot;Start Cooking\&quot;) {\n                            selection = recipe.id.description\n                        }\n                        .padding()\n                    }\n                }\n            }\n            .onAppear {\n                store.dispatch(RecipeInfoAction.GetRecipeInfo(id: recipeId))\n            }\n        }\n    }\n}\n\nstruct Ingredients: View {\n    let recipe: Recipe\n    var body: some View {\n        Divider()\n        // Show a separate section for the ingredients\n        LazyVStack(alignment: .leading) {\n            Text(\&quot;Ingredients\&quot;)\n                .typography(.h4)\n                .padding([.top, .leading, .bottom])\n\n            ForEach(recipe.extendedIngredients, id: \\.self.hashValue) { ingredient in\n\n                VStack(alignment: .leading) {\n                    // Show the ingredient name and amount in a horizontal stack\n                    HStack {\n                        //\n                        AsyncImage(url: URL(string: \&quot;https://spoonacular.com/cdn/ingredients_100x100/\&quot; + ingredient.image)) { imageView in\n                            imageView\n                                .resizable()\n                                .aspectRatio(contentMode: .fit)\n                                .padding(4)\n\n                        } placeholder: {\n                            ProgressView()\n                                .foregroundColor(Color.surface)\n                        }\n                        .frame(width: 50, height: 50)\n                        .background(Color.white)\n                        .clipShape(RoundedRectangle(cornerRadius: 15, style: .continuous))\n                        .padding([.trailing])\n\n                        Text(ingredient.name.capitalized) // Ingredient name\n                            .typography(.p2)\n                            .font(.subheadline)\n\n                        Spacer()\n\n                        Text(\&quot;\\(ingredient.measures.metric.amount.description) \\(ingredient.measures.metric.unitShort)\&quot;) // Ingredient amount\n                            .typography(.p2)\n                            .font(.subheadline)\n                    }\n                    Divider()\n                        .padding([.leading, .trailing])\n                }\n                .padding([.leading, .trailing])\n            }\n        }\n    }\n}\n\nstruct RecipeSummary: View {\n    let recipe: Recipe\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading) {\n                Label(\&quot;\\(recipe.readyInMinutes) Minutes\&quot;, systemImage: \&quot;clock\&quot;)\n                    .typography(.p2)\n\n                Spacer()\n                // Show the ingredients count\n                Label(\&quot;\\(recipe.extendedIngredients.count) Ingredients\&quot;, systemImage: \&quot;list.bullet\&quot;)\n                    .typography(.p2)\n            }\n            Spacer()\n            VStack(alignment: .leading) {\n                // Show the number of steps\n                Label(\&quot;\\(recipe.analyzedInstructions.first?.steps.count ?? 0) Steps\&quot;, systemImage: \&quot;number\&quot;)\n                    .typography(.p2)\n\n                Spacer()\n\n                // Show the rating\n                Label(\&quot;\\(recipe.healthScore) Points\&quot;, systemImage: \&quot;arrow.up.heart\&quot;)\n                    .typography(.p2)\n            }\n        }\n        .padding([.top, .leading, .trailing])\n    }\n}\n\nstruct Steps: View {\n    let recipe: Recipe\n\n    var body: some View {\n        VStack(alignment: .leading) {\n            Text(\&quot;Steps\&quot;)\n                .typography(.h4)\n                .padding([.top, .leading, .bottom])\n\n            Spacer()\n\n            ForEach(recipe.analyzedInstructions.indices, id: \\.self.hashValue) { index in\n                let instruction = recipe.analyzedInstructions[index]\n                VStack(alignment: .leading) {\n                    Spacer()\n                    TabView {\n                        ForEach(instruction.steps, id: \\.self.hashValue) { step in\n                            ZStack {\n                                RoundedRectangle(cornerRadius: 25, style: .continuous)\n                                    .fill(Color.surface)\n\n                                VStack(alignment: .leading) {\n                                    Text(step.number.description)\n                                        .foregroundColor(Color.activePrimary)\n                                        .typography(.h1)\n                                        .padding([.bottom])\n\n                                    Text(step.step)\n                                        .typography(.p1)\n                                        .padding([.bottom])\n\n                                    HStack {\n                                        ForEach(step.ingredients, id: \\.self.hashValue) { ingredient in\n                                            AsyncImage(url: URL(string: \&quot;https://spoonacular.com/cdn/ingredients_100x100/\&quot; + ingredient.image)) { imageView in\n                                                imageView\n                                                    .resizable()\n                                                    .aspectRatio(contentMode: .fit)\n                                                    .padding(4)\n\n                                            } placeholder: {\n                                                ProgressView()\n                                                    .foregroundColor(Color.surface)\n                                            }\n                                            .frame(width: 50, height: 50)\n                                            .background(Color.white)\n                                            .clipShape(RoundedRectangle(cornerRadius: 15, style: .continuous))\n                                            .padding([.trailing])\n                                        }\n                                    }\n\n                                    HStack {\n                                        ForEach(step.equipment, id: \\.self.hashValue) { equipment in\n                                            AsyncImage(url: URL(string: \&quot;https://spoonacular.com/cdn/equipment_100x100/\&quot; + equipment.image)) { imageView in\n                                                imageView\n                                                    .resizable()\n                                                    .aspectRatio(contentMode: .fit)\n                                                    .padding(4)\n\n                                            } placeholder: {\n                                                ProgressView()\n                                                    .foregroundColor(Color.surface)\n                                            }\n                                            .frame(width: 50, height: 50)\n                                            .background(Color.white)\n                                            .clipShape(RoundedRectangle(cornerRadius: 15, style: .continuous))\n                                            .padding([.trailing])\n                                        }\n                                    }\n                                }\n                                .frame(maxHeight: .infinity, alignment: .topLeading)\n                                .padding()\n                            }\n                            .frame(maxHeight: .infinity, alignment: .topLeading)\n                            .padding()\n                        }\n                    }\n                    .tabViewStyle(.page)\n                    .frame(height: 350)\n                }\n            }\n        }\n    }\n}\n\n```&quot;,&quot;id&quot;:&quot;4bb635c1-3206-4a5a-b34c-8cfd0fd6fd43&quot;,&quot;response&quot;:&quot;```kotlin\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport io.kamel.image.KamelImage\nimport io.kamel.image.lazyPainterResource\nimport org.jetbrains.compose.common.foundation.layout.Column\nimport org.jetbrains.compose.common.foundation.layout.Row\n\n@Composable\nfun RecipeDetail(recipeId: String, store: RecipeDetailsStoreWrapper) {\n    val recipe by remember { store.state }.collectAsState(initial = Recipe())\n\n    LaunchedEffect(Unit) {\n        store.dispatch(RecipeInfoAction.GetRecipeInfo(id = recipeId))\n    }\n\n    LazyColumn {\n        item {\n            KamelImage(\n                resource = lazyPainterResource(recipe.image),\n                contentDescription = null,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .clip(RoundedCornerShape(25.dp)),\n                contentScale = ContentScale.FillWidth\n            )\n\n            Spacer(modifier = Modifier.height(16.dp))\n\n            Text(\n                text = recipe.summary,\n                maxLines = 4,\n                overflow = TextOverflow.Ellipsis,\n                modifier = Modifier.padding(16.dp)\n            )\n\n            RecipeSummary(recipe = recipe)\n\n            Divider()\n\n            Ingredients(recipe = recipe)\n\n            if (recipe.analyzedInstructions.isNotEmpty()) {\n                Button(onClick = { /* TODO: Navigate to StepsView */ }) {\n                    Text(\&quot;Start Cooking\&quot;)\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun Ingredients(recipe: Recipe) {\n    Column {\n        Text(\&quot;Ingredients\&quot;, style = MaterialTheme.typography.h6, modifier = Modifier.padding(8.dp))\n        recipe.extendedIngredients.forEach { ingredient -&gt;\n            Row(verticalAlignment = Alignment.CenterVertically) {\n                KamelImage(\n                    resource = lazyPainterResource(\&quot;https://spoonacular.com/cdn/ingredients_100x100/${ingredient.image}\&quot;),\n                    contentDescription = null,\n                    modifier = Modifier\n                        .size(50.dp)\n                        .clip(RoundedCornerShape(15.dp)),\n                    contentScale = ContentScale.Fit\n                )\n                Text(ingredient.name.capitalize(), modifier = Modifier.padding(8.dp))\n                Spacer(Modifier.weight(1f))\n                Text(\&quot;${ingredient.measures.metric.amount} ${ingredient.measures.metric.unitShort}\&quot;)\n            }\n            Divider()\n        }\n    }\n}\n\n@Composable\nfun RecipeSummary(recipe: Recipe) {\n    Row(modifier = Modifier.fillMaxWidth().padding(8.dp)) {\n        Column(modifier = Modifier.weight(1f)) {\n            Icon(Icons.Default.Clock, contentDescription = null)\n            Text(\&quot;${recipe.readyInMinutes} Minutes\&quot;)\n            Spacer(Modifier.height(4.dp))\n            Icon(Icons.Default.List, contentDescription = null)\n            Text(\&quot;${recipe.extendedIngredients.size} Ingredients\&quot;)\n        }\n        Column(modifier = Modifier.weight(1f)) {\n            Icon(Icons.Default.ArrowUpward, contentDescription = null)\n            Text(\&quot;${recipe.analyzedInstructions.firstOrNull()?.steps?.size ?: 0} Steps\&quot;)\n            Spacer(Modifier.height(4.dp))\n            // Assuming there's a health score icon\n            Icon(Icons.Default.ArrowUpward, contentDescription = null)\n            Text(\&quot;${recipe.healthScore} Points\&quot;)\n        }\n&quot;,&quot;userMessage&quot;:&quot;can you use KamelImage instead of Coil for image loading ?&quot;,&quot;serpResults&quot;:null,&quot;referencedFilePaths&quot;:null},{&quot;prompt&quot;:&quot;create a another dependecy for material icons and material icons extended\n```toml\ncompose-material = { module = \&quot;androidx.compose.material:material\&quot;, version.ref = \&quot;androidx-compose-ui\&quot; }\n\n```&quot;,&quot;id&quot;:&quot;687e682a-fd89-4e0a-a9b8-e5dd2412cf18&quot;,&quot;response&quot;:&quot;```toml\ncompose-material-icons-core = { module = \&quot;androidx.compose.material:material-icons-core\&quot;, version.ref = \&quot;androidx-compose-ui\&quot; }\ncompose-material-icons-extended = { module = \&quot;androidx.compose.material:material-icons-extended\&quot;, version.ref = \&quot;androidx-compose-ui&quot;,&quot;userMessage&quot;:&quot;create a another dependecy for material icons and material icons extended&quot;,&quot;serpResults&quot;:null,&quot;referencedFilePaths&quot;:null}],&quot;clientCode&quot;:&quot;chat.completion&quot;,&quot;model&quot;:&quot;gpt-4-0125-preview&quot;,&quot;createdOn&quot;:[2024,4,9,21,0,6,676058000],&quot;updatedOn&quot;:[2024,4,9,21,9,34,231400000],&quot;discardTokenLimit&quot;:false}" />
  </component>
</application>